@page "/auth/2fa"
@using global::Chat.Client.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IdentityStateProvider IdentityStateProvider

<h3>Two-Factor Authentication</h3>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <p class="text-info">@StatusMessage</p>
}

@if (_lockedOut)
{
    <p class="text-danger">Too many failed attempts. Please wait a few minutes or try again later.</p>
}
else
{
    <EditForm Model="_model" OnValidSubmit="VerifyCode">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="code">6-digit code:</label>
            <InputText id="code" @bind-Value="_model.TwoFactorCode" class="form-control" />
        </div>

        <button class="btn btn-primary" type="submit" disabled="@(_cooldownSeconds > 0)">Submit</button>

        @if (_cooldownSeconds > 0)
        {
            <p class="text-warning">Please wait @_cooldownSeconds seconds before resending.</p>
        }

        <button class="btn btn-secondary mt-2" @onclick="ResendCode" disabled="@(_cooldownSeconds > 0)">Resend Code</button>
    </EditForm>
}

@code {
    private TwoFactorModel _model = new();
    private string StatusMessage = "";
    private int _attemptsLeft = 3;
    private bool _lockedOut = false;
    private int _cooldownSeconds = 0;
    private System.Timers.Timer? _cooldownTimer;

    protected override void OnInitialized()
    {
        var userId = Navigation.ToAbsoluteUri(Navigation.Uri).Query
                      .Split("userId=", StringSplitOptions.RemoveEmptyEntries).LastOrDefault();

        if (!string.IsNullOrEmpty(userId))
            _model.UserId = userId!;
        else
            StatusMessage = "User ID is missing in the URL.";
    }

    private async Task VerifyCode()
    {
        var response = await Http.PostAsJsonAsync("/api/auth/verify-2fa", _model);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<TokenResult>();
            await IdentityStateProvider.SetUser(result!.Token);
            await Task.Delay(500);
            Navigation.NavigateTo("/home", forceLoad: true);
        }
        else
        {
            _attemptsLeft--;

            if (_attemptsLeft <= 0)
            {
                _lockedOut = true;
                StatusMessage = "Too many failed attempts.";
                return;
            }

            StatusMessage = $"Invalid code. You have {_attemptsLeft} attempt(s) left.";
        }
    }

    private async Task ResendCode()
    {
        var response = await Http.PostAsJsonAsync("/api/auth/verify-2fa", _model);
        StatusMessage = response.IsSuccessStatusCode
            ? "New code has been sent!"
            : "Error sending the code.";

        StartCooldown(60);
    }

    private void StartCooldown(int seconds)
    {
        _cooldownSeconds = seconds;
        _cooldownTimer?.Dispose();

        _cooldownTimer = new System.Timers.Timer(1000);
        _cooldownTimer.Elapsed += (_, _) =>
        {
            if (_cooldownSeconds > 0)
            {
                _cooldownSeconds--;
                InvokeAsync(StateHasChanged);
            }

            if (_cooldownSeconds == 0)
            {
                _cooldownTimer!.Stop();
            }
        };

        _cooldownTimer.Start();
    }

    class TwoFactorModel
    {
        public string UserId { get; set; } = "";
        public string TwoFactorCode { get; set; } = "";
    }

    class TokenResult
    {
        public string Token { get; set; } = "";
    }
}
