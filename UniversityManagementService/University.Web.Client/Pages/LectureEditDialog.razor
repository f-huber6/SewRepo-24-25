@using MudBlazor
@using University.Client.Services
@using University.InstructorService.API.Dto
@using University.Shared.DtoCourse
@using University.Shared.DtoLecture
@using University.Web.Client.Services
@inject LectureHttpService LectureService
@inject CourseHttpService  CourseService

<EditForm Model="_model" OnValidSubmit="Submit">
    <MudDialog>
        <DialogContent>
            <MudStack Spacing="2">
                <MudSelect @bind-Value="_model.CourseId" Label="Kurs" Required="true">
                    @foreach (var c in _courses)
                    {
                        <MudSelectItem Value="@c.Id">@c.Title</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField @bind-Value="_model.RoomNumber" Label="Raum" Required="true" />

                <MudGrid>
                    <MudItem xs="6">
                        <MudDatePicker T="DateTime?"
                                         @bind-Value="_startDate"
                                         Label="Startdatum" Required="true"
                                         PickerVariant="PickerVariant.Inline" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTimePicker T="TimeSpan"
                                         @bind-Value="_startTime"
                                         Label="Startzeit" Required="true" />
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="6">
                        <MudDatePicker T="DateTime?"
                                         @bind-Value="_endDate"
                                         Label="Enddatum" Required="true"
                                         PickerVariant="PickerVariant.Inline" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTimePicker T="TimeSpan"
                                         @bind-Value="_endTime"
                                         Label="Endzeit" Required="true" />
                    </MudItem>
                </MudGrid>
            </MudStack>
        </DialogContent>

        <DialogActions>
            <MudButton Variant="Variant.Text" OnClick="Cancel">Abbrechen</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">
                @(IsEdit ? "Speichern" : "Anlegen")
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter]          public LectureDto? Existing  { get; set; }

    List<CourseDto>    _courses   = new();
    LectureCreateDto   _model     = new();
    bool               IsEdit;

    private DateTime?  _startDate = DateTime.Today;
    private TimeSpan  _startTime = TimeSpan.Zero;
    private DateTime?  _endDate   = DateTime.Today;
    private TimeSpan  _endTime   = TimeSpan.Zero;

    protected override async Task OnInitializedAsync()
    {
        _courses = await CourseService.GetAllAsync();

        if (Existing != null)
        {
            IsEdit     = true;
            _startDate = Existing.StartTime.Date;
            _startTime = Existing.StartTime.TimeOfDay;
            _endDate   = Existing.EndTime.Date;
            _endTime   = Existing.EndTime.TimeOfDay;

            _model = new LectureCreateDto {
                CourseId   = Existing.CourseId!,
                RoomNumber = Existing.RoomNumber,
                StartTime  = Existing.StartTime,
                EndTime    = Existing.EndTime
            };
        }
    }

    async Task Submit()
    {
        var start = _startDate?.Date + _startTime;
        var end   = _endDate?.Date   + _endTime;

        if (IsEdit && Existing != null)
        {
            await LectureService.UpdateAsync(
                Existing.Id,
                new LectureUpdateDto {
                    CourseId   = _model.CourseId,
                    RoomNumber = _model.RoomNumber,
                    StartTime  = start,
                    EndTime    = end
                });
        }
        else
        {
            await LectureService.CreateAsync(new LectureCreateDto {
                CourseId   = _model.CourseId,
                RoomNumber = _model.RoomNumber,
                StartTime  = start,
                EndTime    = end
            });
        }

        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}
